//
//  ToggleRecordButtonStyleKit.swift
//  AudioKit Synth One
//
//  Created by Aurelius Prochazka on 11/14/19.
//  Copyright Â© 2019 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ToggleRecordButtonStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawRoundButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, isToggled: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        context.setAlpha(0.8)

        //// Color Declarations
        let darkRed = UIColor(red: 0.577, green: 0.000, blue: 0.000, alpha: 1.000)
        let brightRed = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 28, height: 28))
        darkRed.setFill()
        ovalPath.fill()
        UIColor.red.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()
        
        if (isToggled) {
            let ovalPath2 = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 28, height: 28))
            //// buttonOn
            context.saveGState()
            brightRed.setFill()
            ovalPath2.fill()
            context.restoreGState()
        }
        
        context.restoreGState()

    }




    @objc(ToggleRecordButtonStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

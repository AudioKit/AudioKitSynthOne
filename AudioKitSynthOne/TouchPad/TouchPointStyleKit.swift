//
//  TouchPointStyleKit.swift
//  AKSynthOne
//
//  Created by AudioKit Contributors on 8/29/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class TouchPointStyleKit: NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawTouchPoint(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 61, height: 61), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 61, height: 61), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 61, y: resizedFrame.height / 61)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 61, resizedFrame.height / 61)

        //// Color Declarations
        let orange = UIColor(red: 0.902, green: 0.533, blue: 0.008, alpha: 1.000)
        let orangeAlpha = UIColor(red: 0.902, green: 0.533, blue: 0.008, alpha: 0.500)

        //// Shadow Declarations
        let orangeGlow = NSShadow()
        orangeGlow.shadowColor = orange
        orangeGlow.shadowOffset = CGSize(width: 0, height: 0)
        orangeGlow.shadowBlurRadius = 12
        let outerGlow = NSShadow()
        outerGlow.shadowColor = orange.withAlphaComponent(0.2 * orange.cgColor.alpha)
        outerGlow.shadowOffset = CGSize(width: 0, height: 0)
        outerGlow.shadowBlurRadius = 8

        //// Point
        context.saveGState()
        context.setShadow(offset: CGSize(width: outerGlow.shadowOffset.width * resizedShadowScale, height: outerGlow.shadowOffset.height * resizedShadowScale), blur: outerGlow.shadowBlurRadius * resizedShadowScale, color: (outerGlow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 11, y: 10, width: 39, height: 39), cornerRadius: 8)
        context.saveGState()
        context.setShadow(offset: CGSize(width: orangeGlow.shadowOffset.width * resizedShadowScale, height: orangeGlow.shadowOffset.height * resizedShadowScale), blur: orangeGlow.shadowBlurRadius * resizedShadowScale, color: (orangeGlow.shadowColor as! UIColor).cgColor)
        orangeAlpha.setStroke()
        rectangle2Path.lineWidth = 4
        rectangle2Path.stroke()
        context.restoreGState()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 19, y: 18, width: 23, height: 23), cornerRadius: 4)
        context.saveGState()
        context.setShadow(offset: CGSize(width: orangeGlow.shadowOffset.width * resizedShadowScale, height: orangeGlow.shadowOffset.height * resizedShadowScale), blur: orangeGlow.shadowBlurRadius * resizedShadowScale, color: (orangeGlow.shadowColor as! UIColor).cgColor)
        orange.setFill()
        rectanglePath.fill()
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()

    }

    @objc(TouchPointStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

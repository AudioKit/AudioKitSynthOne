//
//  ArpButtonStyleKit.swift
//  AudioKitSynthOne
//
//  Created by Matthew Fecher on 8/1/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class ArpButtonStyleKit: NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawArpButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 25), resizing: ResizingBehavior = .aspectFit, isToggled: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 25)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 35, resizedFrame.height / 25)

        //// Color Declarations
        let gradientColor = UIColor(red: 0.173, green: 0.173, blue: 0.188, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.388, green: 0.388, blue: 0.409, alpha: 1.000)
        let gradientColor3 = UIColor(red: 0.282, green: 0.282, blue: 0.303, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.333, green: 0.333, blue: 0.365, alpha: 1.000)
        let orange = UIColor(red: 0.902, green: 0.533, blue: 0.008, alpha: 1.000)
        let buttonOff = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let buttonEdge = UIColor(red: 0.173, green: 0.173, blue: 0.125, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, gradientColor.blended(withFraction: 0.5, of: gradientColor3).cgColor, gradientColor3.cgColor, gradientColor4.cgColor, gradientColor2.cgColor] as CFArray, locations: [0, 0.1, 0.19, 0.61, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.31)
        shadow.shadowOffset = CGSize(width: 0, height: 3)
        shadow.shadowBlurRadius = 3
        let shadow3 = NSShadow()
        shadow3.shadowColor = orange
        shadow3.shadowOffset = CGSize(width: 0, height: 0)
        shadow3.shadowBlurRadius = 6

        //// Button
        //// ButtonBack Drawing
        let buttonBackPath = UIBezierPath(roundedRect: CGRect(x: 1, y: 1, width: 33, height: 21), cornerRadius: 4)
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        buttonBackPath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 17.5, y: 22), end: CGPoint(x: 17.5, y: 1), options: [])
        context.endTransparencyLayer()
        context.restoreGState()

        buttonEdge.setStroke()
        buttonBackPath.lineWidth = 1
        buttonBackPath.stroke()

        //// ButtonGlow off Drawing
        let buttonGlowOffPath = UIBezierPath(rect: CGRect(x: 7, y: 9, width: 21, height: 4))
        buttonOff.setFill()
        buttonGlowOffPath.fill()

        if isToggled {
            //// ButtonGlow Drawing
            let buttonGlowPath = UIBezierPath(rect: CGRect(x: 7, y: 9, width: 21, height: 4))
            context.saveGState()
            context.setShadow(offset: CGSize(width: shadow3.shadowOffset.width * resizedShadowScale,
                                             height: shadow3.shadowOffset.height * resizedShadowScale),
                              blur: shadow3.shadowBlurRadius * resizedShadowScale,
                              color: (shadow3.shadowColor as! UIColor).cgColor)
            orange.setFill()
            buttonGlowPath.fill()
            context.restoreGState()

        }

        context.restoreGState()

    }

    @objc(ArpButtonStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction)
    }
}

//
//  ToggleSwitchStyleKit.swift
//  AKSynthOne
//
//  Created by AudioKit Contributors on 8/2/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class ToggleSwitchStyleKit: NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawToggleSwitch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 31), resizing: ResizingBehavior = .aspectFit, isToggled: Bool = false ) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 31)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 60, resizedFrame.height / 31)

        //// Color Declarations
        let gray = UIColor(red: 0.306, green: 0.306, blue: 0.325, alpha: 1.000)
        let shadowColor = UIColor(red: 0.133, green: 0.133, blue: 0.133, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = shadowColor
        shadow.shadowOffset = CGSize(width: 0, height: -2)
        shadow.shadowBlurRadius = 8

        //// Variable Declarations
        let expression: CGFloat = isToggled ? 32 : 12

        //// track Drawing
        let trackPath = UIBezierPath(roundedRect: CGRect(x: 8, y: 6, width: 36, height: 17), cornerRadius: 6)
        shadowColor.setFill()
        trackPath.fill()

        //// button
        context.saveGState()
        context.translateBy(x: (expression - 9), y: 2)

        //// buttonBackground 2 Drawing
        let buttonBackground2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 26, height: 26))
        gray.setFill()
        buttonBackground2Path.fill()

        ////// buttonBackground 2 Inner Shadow
        context.saveGState()
        context.clip(to: buttonBackground2Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let buttonBackground2OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale,
                                         height: shadow.shadowOffset.height * resizedShadowScale),
                          blur: shadow.shadowBlurRadius * resizedShadowScale,
                          color: buttonBackground2OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        buttonBackground2OpaqueShadow.setFill()
        buttonBackground2Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        shadowColor.setStroke()
        buttonBackground2Path.lineWidth = 0.5
        buttonBackground2Path.stroke()

        context.restoreGState()

        context.restoreGState()

    }

    @objc(ToggleSwitchStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

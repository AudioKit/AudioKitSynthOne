//
//  UIButtonStyleKit.swift
//  AudioKit
//
//  Created by Matthew Fecher on 10/5/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class TopUIButtonStyleKit : NSObject {
    
    //// Drawing Methods
    
    dynamic public class func drawUIButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 34), resizing: ResizingBehavior = .aspectFit, isOn: Bool = false, text: String = "AudioKit", textSize: CGFloat = 13, onColor: UIColor = UIColor(red: 0.341, green: 0.349, blue: 0.345, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 34)
        
        
        //// Color Declarations
        let selectedColor = #colorLiteral(red: 0.3074846268, green: 0.3076768517, blue: 0.3245888352, alpha: 1) // onColor
        let offColor = UIColor(red: 0.169, green: 0.169, blue: 0.169, alpha: 1.000)
        let color = UIColor(red: 0.067, green: 0.067, blue: 0.067, alpha: 1.000)
        
        //// Variable Declarations
        let isToggled = isOn ? selectedColor : offColor
        let textColor = isOn ? #colorLiteral(red: 0.9725490196, green: 0.9725490196, blue: 0.9725490196, alpha: 1) : UIColor.lightGray
        
        
        //// Button
        //// Rectangle Drawing
        let rectangleRect = CGRect(x: 2, y: 2, width: 66, height: 30)
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, cornerRadius: 2)
        isToggled.setFill()
        rectanglePath.fill()
        color.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
        let rectangleStyle = NSMutableParagraphStyle()
        rectangleStyle.alignment = .center
        let rectangleFontAttributes = [
            .font: UIFont(name: "AvenirNext-Regular", size: textSize)!,
            .foregroundColor: textColor,
            .paragraphStyle: rectangleStyle,
            ] as [NSAttributedString.Key: Any]
        
        let rectangleTextHeight: CGFloat = text.boundingRect(with: CGSize(width: rectangleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: rectangleRect)
        text.draw(in: CGRect(x: rectangleRect.minX, y: rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, width: rectangleRect.width, height: rectangleTextHeight), withAttributes: rectangleFontAttributes)
        context.restoreGState()
        
        context.restoreGState()
        
    }
    

    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}


//
//  BlackKeyStyleKit.swift
//  AKSynthOne
//
//  Created by Matthew Fecher on 8/29/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class BlackKeyStyleKit: NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawBlackKeyCanvas2(frame: CGRect = CGRect(x: 0, y: 31, width: 36, height: 112)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let keyColor = UIColor(red: 0.118, green: 0.118, blue: 0.137, alpha: 1.000)
        var keyColorRedComponent: CGFloat = 1
        var keyColorGreenComponent: CGFloat = 1
        var keyColorBlueComponent: CGFloat = 1
        keyColor.getRed(&keyColorRedComponent, green: &keyColorGreenComponent, blue: &keyColorBlueComponent, alpha: nil)

        var keyColorHueComponent: CGFloat = 1
        var keyColorSaturationComponent: CGFloat = 1
        var keyColorBrightnessComponent: CGFloat = 1
        keyColor.getHue(&keyColorHueComponent, saturation: &keyColorSaturationComponent, brightness: &keyColorBrightnessComponent, alpha: nil)

        let bottomMidle = UIColor(hue: keyColorHueComponent, saturation: keyColorSaturationComponent, brightness: 0.2, alpha: keyColor.cgColor.alpha)
        let bottom = UIColor(red: (keyColorRedComponent * 0.7 + 0.3), green: (keyColorGreenComponent * 0.7 + 0.3), blue: (keyColorBlueComponent * 0.7 + 0.3), alpha: (keyColor.cgColor.alpha * 0.7 + 0.3))
        let bottomTop = UIColor(hue: keyColorHueComponent, saturation: keyColorSaturationComponent, brightness: 0.2, alpha: keyColor.cgColor.alpha)
        let topBottom = UIColor(red: (keyColorRedComponent * 0.8 + 0.2), green: (keyColorGreenComponent * 0.8 + 0.2), blue: (keyColorBlueComponent * 0.8 + 0.2), alpha: (keyColor.cgColor.alpha * 0.8 + 0.2))
        let top = UIColor(hue: keyColorHueComponent, saturation: keyColorSaturationComponent, brightness: 0.2, alpha: keyColor.cgColor.alpha)
        let backgroundColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [bottom.cgColor, bottom.blended(withFraction: 0.5, of: bottomMidle).cgColor, bottomMidle.cgColor, bottomMidle.blended(withFraction: 0.5, of: bottomTop).cgColor, bottomTop.cgColor] as CFArray, locations: [0, 0.07, 0.41, 0.78, 1])!
        let gradient2 = CGGradient(colorsSpace: nil, colors: [top.cgColor, topBottom.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 0)
        shadow.shadowBlurRadius = 4

        //// Subframes
        let blackKey2: CGRect = CGRect(x: frame.minX + 0.5, y: frame.minY, width: fastFloor((frame.width - 0.5) * 1.01408 + 0.5), height: fastFloor((frame.height) * 1.00000 + 0.5))

        //// BlackKey 2
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: blackKey2.minX + fastFloor(blackKey2.width * 0.00000 + 0.5), y: blackKey2.minY + fastFloor(blackKey2.height * 0.00000 + 0.5), width: fastFloor(blackKey2.width * 1.00000 + 0.5) - fastFloor(blackKey2.width * 0.00000 + 0.5), height: fastFloor(blackKey2.height * 1.00000 + 0.5) - fastFloor(blackKey2.height * 0.00000 + 0.5)), byRoundingCorners: [.bottomLeft, .bottomRight], cornerRadii: CGSize(width: 4, height: 4))
        rectangle4Path.close()
        backgroundColor.setFill()
        rectangle4Path.fill()

        ////// Rectangle 4 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle4Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle4OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle4OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle4OpaqueShadow.setFill()
        rectangle4Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        //// Rectangle 5 Drawing
        let rectangle5Rect = CGRect(x: blackKey2.minX + fastFloor(blackKey2.width * 0.11111 + 0.5), y: blackKey2.minY + fastFloor(blackKey2.height * 0.75000 + 0.5), width: fastFloor(blackKey2.width * 0.91667 + 0.5) - fastFloor(blackKey2.width * 0.11111 + 0.5), height: fastFloor(blackKey2.height * 0.97321 + 0.5) - fastFloor(blackKey2.height * 0.75000 + 0.5))
        let rectangle5Path = UIBezierPath(roundedRect: rectangle5Rect, byRoundingCorners: [.bottomLeft, .bottomRight], cornerRadii: CGSize(width: 4, height: 4))
        rectangle5Path.close()
        context.saveGState()
        rectangle5Path.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: rectangle5Rect.midX, y: rectangle5Rect.maxY),
            end: CGPoint(x: rectangle5Rect.midX, y: rectangle5Rect.minY),
            options: [])
        context.restoreGState()

        ////// Rectangle 5 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle5Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle5OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle5OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle5OpaqueShadow.setFill()
        rectangle5Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        //// Rectangle 6 Drawing
        let rectangle6Rect = CGRect(x: blackKey2.minX + fastFloor(blackKey2.width * 0.11111 + 0.5), y: blackKey2.minY + fastFloor(blackKey2.height * 0.00000 + 0.5), width: fastFloor(blackKey2.width * 0.91667 + 0.5) - fastFloor(blackKey2.width * 0.11111 + 0.5), height: fastFloor(blackKey2.height * 0.83036 + 0.5) - fastFloor(blackKey2.height * 0.00000 + 0.5))
        let rectangle6Path = UIBezierPath(roundedRect: rectangle6Rect, byRoundingCorners: [.bottomLeft, .bottomRight], cornerRadii: CGSize(width: 4, height: 4))
        rectangle6Path.close()
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        rectangle6Path.addClip()
        context.drawLinearGradient(gradient2,
            start: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.minY),
            end: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.maxY),
            options: [])
        context.endTransparencyLayer()

        ////// Rectangle 6 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle6Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle6OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle6OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle6OpaqueShadow.setFill()
        rectangle6Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()
    }

}

private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction)
    }
}

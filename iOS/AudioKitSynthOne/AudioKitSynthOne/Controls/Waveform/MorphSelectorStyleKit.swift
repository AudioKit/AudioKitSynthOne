//
//  MorphSelectorStyleKit.swift
//  SynthOne
//
//  Created by AudioKit Contributors on 11/28/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class MorphSelectorStyleKit: NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawMorphSelector(value: CGFloat = 1, width: CGFloat = 240, height: CGFloat = 53) {
        //// Color Declarations
        let selected = UIColor(red: 0.929, green: 0.533, blue: 0.000, alpha: 1.000)
        let unselected = UIColor(red: 0.533, green: 0.533, blue: 0.533, alpha: 1.000)
        let selectedBG = UIColor(red: 0.275, green: 0.271, blue: 0.278, alpha: 0.500)

        //// Variable Declarations
        let color1 = value <= 0.25 ? selected : unselected
        let color2 = value > 0.25 && value <= 0.5 ? selected : unselected
        let color3 = value > 0.5 && value <= 0.75 ? selected : unselected
        let color4 = value > 0.75 && value <= 1 ? selected : unselected
        let xValue: CGFloat = value * 0.79 * width + 6.0 / 260.0 * width

        //// Frames
        let frame = CGRect(x: 0, y: 0, width: width, height: height)

        //// background Drawing

        //// Chosen Area Drawing
        let chosenAreaPath = UIBezierPath(rect: CGRect(x: (xValue - 0.138_461_538_462), y: 7, width: 39, height: 36))
        selectedBG.setFill()
        chosenAreaPath.fill()

        //// Triangle Drawing
        let trianglePath = UIBezierPath()
        trianglePath.move(to: CGPoint(x: frame.minX + 0.043_09 * frame.width, y: frame.minY + 0.490_57 * frame.height))
        trianglePath.addLine(to: CGPoint(x: frame.minX + 0.066_25 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        trianglePath.addLine(to: CGPoint(x: frame.minX + 0.112_58 * frame.width, y: frame.minY + 0.641_51 * frame.height))
        trianglePath.addLine(to: CGPoint(x: frame.minX + 0.151_20 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        trianglePath.addLine(to: CGPoint(x: frame.minX + 0.178_22 * frame.width, y: frame.minY + 0.490_57 * frame.height))
        color1.setStroke()
        trianglePath.lineWidth = 2
        trianglePath.stroke()

        //// Square Drawing
        let squarePath = UIBezierPath()
        squarePath.move(to: CGPoint(x: frame.minX + 0.312_46 * frame.width, y: frame.minY + 0.490_57 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.312_46 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.354_93 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.354_93 * frame.width, y: frame.minY + 0.641_51 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.397_40 * frame.width, y: frame.minY + 0.641_51 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.397_40 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.439_87 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.439_87 * frame.width, y: frame.minY + 0.490_57 * frame.height))
        color2.setStroke()
        squarePath.lineWidth = 2
        squarePath.stroke()

        //// HighPWMValue Drawing
        let highPWMValuePath = UIBezierPath()
        highPWMValuePath.move(to: CGPoint(x: frame.minX + 0.595_91 * frame.width, y: frame.minY + 0.481_69 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.595_91 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.619_08 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.619_08 * frame.width, y: frame.minY + 0.641_51 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.661_55 * frame.width, y: frame.minY + 0.641_51 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.661_55 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.684_71 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.684_71 * frame.width, y: frame.minY + 0.481_69 * frame.height))
        color3.setStroke()
        highPWMValuePath.lineWidth = 2
        highPWMValuePath.stroke()

        //// Sawtooth Drawing
        let sawtoothPath = UIBezierPath()
        sawtoothPath.move(to: CGPoint(x: frame.minX + 0.825_04 * frame.width, y: frame.minY + 0.490_57 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.859_79 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.859_79 * frame.width, y: frame.minY + 0.641_51 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.925_42 * frame.width, y: frame.minY + 0.339_62 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.925_42 * frame.width, y: frame.minY + 0.641_51 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.966_35 * frame.width, y: frame.minY + 0.490_57 * frame.height))
        color4.setStroke()
        sawtoothPath.lineWidth = 2
        sawtoothPath.stroke()
    }

}
